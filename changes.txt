diff --git a/internal/bot/handlers/callbacks.go b/internal/bot/handlers/callbacks.go
index a5dd52e..2f77302 100644
--- a/internal/bot/handlers/callbacks.go
+++ b/internal/bot/handlers/callbacks.go
@@ -23,56 +23,183 @@ func Callbacks(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
 	callbackData := strings.Split(update.CallbackData(), `_`)
 
 	switch callbackData[0] {
+
 	case "start":
-		if services.IsSubscribed(bot, update.CallbackQuery.From.ID) {
-			text := fmt.Sprintf(services.GetTextLocale(update.CallbackQuery.From.LanguageCode, update.CallbackData()), update.CallbackQuery.From.FirstName+update.CallbackQuery.From.LastName)
+		msg = callbackStart(bot, &update)
+
+	case "generate":
+		msg = callbackGenerate(&update, &callbackData)
+
+	case "request":
+		msg = callbackRequest(&update, &callbackData)
+
+	case "download":
+		msg = callbackDownload(&update, &callbackData)
+
+	case "socials":
+		msg = callbackSocials(&update)
+
+	case "payment":
+		msg = callbackPayment(bot, &update, &callbackData)
+
+	case "support":
+		msg = callbackSupport(&update)
+
+	}
+	if msg.Text != "" {
+		msg.ParseMode = "HTML"
+		if _, err := bot.Send(msg); err != nil {
+			log.Printf("Callback Error: %v", err)
+		}
+	}
+}
+
+func callbackStart(bot *tgbotapi.BotAPI, update *tgbotapi.Update) (msg tgbotapi.EditMessageTextConfig) {
+	services.SetUserState(update, "start")
+	if services.IsSubscribed(bot, update.CallbackQuery.From.ID) {
+		text := fmt.Sprintf(services.GetTextLocale(update.CallbackQuery.From.LanguageCode, update.CallbackData()), update.CallbackQuery.From.FirstName+update.CallbackQuery.From.LastName)
+		msg = tgbotapi.NewEditMessageTextAndMarkup(
+			update.CallbackQuery.Message.Chat.ID,
+			update.CallbackQuery.Message.MessageID,
+			text,
+			keyboards.KeyboardStart(update.CallbackQuery.From.LanguageCode),
+		)
+	} else {
+		text := "To use this bot, you should be subscribed to my channel!"
+		msg = tgbotapi.NewEditMessageTextAndMarkup(
+			update.CallbackQuery.Message.Chat.ID,
+			update.CallbackQuery.Message.MessageID,
+			text,
+			keyboards.KeyboardSubscribe(),
+		)
+	}
+	return
+}
+
+func callbackGenerate(update *tgbotapi.Update, callbackData *[]string) (msg tgbotapi.EditMessageTextConfig) {
+	state := (*callbackData)[0] + "_" + (*callbackData)[1]
+
+	switch (*callbackData)[1] {
+
+	// Menu that prints all the information and let's user choose the model
+	case "menu":
+		user := services.GetUser(update)
+		services.SetUserState(update, state)
+		text := fmt.Sprintf(
+			services.GetTextLocale(update.SentFrom().LanguageCode, "generate_menu"),
+			user.FullName,
+			user.GeneratedImagesCount,
+			user.Credits,
+			uint(float64(user.Credits)*12.5),
+		)
+
+		msg = tgbotapi.NewEditMessageTextAndMarkup(
+			update.FromChat().ID,
+			update.CallbackQuery.Message.MessageID,
+			text,
+			keyboards.KeyboardGenerateMenu(),
+		)
+
+	case "1":
+		msg = tgbotapi.NewEditMessageTextAndMarkup(
+			update.FromChat().ID,
+			update.CallbackQuery.Message.MessageID,
+			"I'm sorry this feature is not available yet 😔\nCome back later",
+			keyboards.KeyboardBackButton("generate_menu"),
+		)
+
+	case "2":
+		if services.EnoughCoins(2, update) {
+			services.SetUserState(update, state)
 			msg = tgbotapi.NewEditMessageTextAndMarkup(
-				update.CallbackQuery.Message.Chat.ID,
+				update.FromChat().ID,
 				update.CallbackQuery.Message.MessageID,
-				text,
-				keyboards.KeyboardStart(update.CallbackQuery.From.LanguageCode),
+				"Now send the description of the image in the realism style.\nAnd I'll create it for you.",
+				keyboards.KeyboardBackButton("generate_menu"),
 			)
 		} else {
-			text := "To use this bot, you should be subscribed to my channel!"
 			msg = tgbotapi.NewEditMessageTextAndMarkup(
-				update.CallbackQuery.Message.Chat.ID,
+				update.FromChat().ID,
 				update.CallbackQuery.Message.MessageID,
-				text,
-				keyboards.KeyboardSubscribe(),
+				"You don't have enough coins. 🪙\nTop up your balance and come back here.",
+				keyboards.KeyboardBackButton("generate_menu"),
 			)
 		}
 
-	case "request":
-		msg = callbackRequest(&update, &callbackData)
+	case "3":
+		if services.EnoughCoins(2, update) {
+			services.SetUserState(update, state)
+			msg = tgbotapi.NewEditMessageTextAndMarkup(
+				update.FromChat().ID,
+				update.CallbackQuery.Message.MessageID,
+				"Now send the description of the image in the anime style.\nAnd I'll create it for you.",
+				keyboards.KeyboardBackButton("generate_menu"),
+			)
+		} else {
+			msg = tgbotapi.NewEditMessageTextAndMarkup(
+				update.FromChat().ID,
+				update.CallbackQuery.Message.MessageID,
+				"You don't have enough coins. 🪙\nTop up your balance and come back here.",
+				keyboards.KeyboardBackButton("generate_menu"),
+			)
+		}
+	}
+	return
+}
 
-	case "download":
-		msg = callbackDownload(&update, &callbackData)
+func callbackPayment(bot *tgbotapi.BotAPI, update *tgbotapi.Update, callbackData *[]string) (msg tgbotapi.EditMessageTextConfig) {
+	state := (*callbackData)[0] + "_" + (*callbackData)[1]
+	services.SetUserState(update, state)
 
-	case "socials":
+	switch (*callbackData)[1] {
+
+	// Generate image menu
+	case "menu":
+		text := services.GetTextLocale(update.SentFrom().LanguageCode, "payment_menu")
 		msg = tgbotapi.NewEditMessageTextAndMarkup(
-			update.CallbackQuery.Message.Chat.ID,
+			update.FromChat().ID,
 			update.CallbackQuery.Message.MessageID,
-			services.GetTextLocale(update.CallbackQuery.From.LanguageCode, "socials"),
-			keyboards.KeyboardSocials(),
+			text,
+			keyboards.KeyboardPayment(),
 		)
+	case "1000":
+		createNewInvoice(bot, update, 1000)
 
-	case "support":
-		msg = tgbotapi.NewEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.ID, update.CallbackQuery.Message.MessageID, services.GetTextLocale(update.CallbackQuery.From.LanguageCode, "support"), keyboards.KeyboardSupport())
+	case "500":
+		createNewInvoice(bot, update, 500)
+
+	case "250":
+		createNewInvoice(bot, update, 250)
+	}
+	return
+}
+
+func createNewInvoice(bot *tgbotapi.BotAPI, update *tgbotapi.Update, amount int) {
 
+	prices := []tgbotapi.LabeledPrice{
+		{
+			Label:  fmt.Sprintf("Pay for %d stars", amount),
+			Amount: amount,
+		},
 	}
 
-	msg.ParseMode = "HTML"
-	if _, err := bot.Send(msg); err != nil {
-		log.Printf("Callback Error: %v", err)
+	title := fmt.Sprintf(services.GetTextLocale(update.SentFrom().LanguageCode, "balance_up_title"), int(float64(amount)/12.5))
+	description := fmt.Sprintf(services.GetTextLocale(update.SentFrom().LanguageCode, "balance_up_description"), int(float64(amount)/12.5))
+
+	invoice := tgbotapi.NewInvoice(update.FromChat().ID, title, description, "custom_payload", "", "start_param", "XTR", prices)
+	invoice.SuggestedTipAmounts = []int{}
+
+	if _, err := bot.Send(invoice); err != nil {
+		log.Printf("Sending the invoice error: %v", err)
 	}
 }
 
-func callbackRequest(update *tgbotapi.Update, callbackData *[]string) tgbotapi.EditMessageTextConfig {
-	var msg tgbotapi.EditMessageTextConfig
+func callbackRequest(update *tgbotapi.Update, callbackData *[]string) (msg tgbotapi.EditMessageTextConfig) {
+	state := (*callbackData)[0] + "_" + (*callbackData)[1]
 
-	services.SetUserState(update, (*callbackData)[0]+"_"+(*callbackData)[1])
+	services.SetUserState(update, state)
 
-	text := services.GetTextLocale(update.CallbackQuery.From.LanguageCode, (*callbackData)[0]+"_"+(*callbackData)[1])
+	text := services.GetTextLocale(update.CallbackQuery.From.LanguageCode, state)
 
 	switch (*callbackData)[1] {
 
@@ -113,21 +240,41 @@ func callbackRequest(update *tgbotapi.Update, callbackData *[]string) tgbotapi.E
 		)
 
 	}
-	return msg
+	return
 }
 
-func callbackDownload(update *tgbotapi.Update, callbackData *[]string) tgbotapi.EditMessageTextConfig {
-	var msg tgbotapi.EditMessageTextConfig
+func callbackDownload(update *tgbotapi.Update, callbackData *[]string) (msg tgbotapi.EditMessageTextConfig) {
+	state := (*callbackData)[0] + "_" + (*callbackData)[1]
 
-	services.SetUserState(update, (*callbackData)[0]+"_"+(*callbackData)[1])
+	services.SetUserState(update, state)
 
-	text := services.GetTextLocale(update.CallbackQuery.From.LanguageCode, (*callbackData)[0]+"_"+(*callbackData)[1])
+	text := services.GetTextLocale(update.CallbackQuery.From.LanguageCode, state)
 
 	switch (*callbackData)[1] {
 
 	// Menu for the download
 	case "0":
-		msg = tgbotapi.NewEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.ID, update.CallbackQuery.Message.MessageID, text, keyboards.KeyboardMainMenu(update.SentFrom().LanguageCode))
+		msg = tgbotapi.NewEditMessageTextAndMarkup(update.FromChat().ID, update.CallbackQuery.Message.MessageID, text, keyboards.KeyboardMainMenu(update.SentFrom().LanguageCode))
 	}
-	return msg
+	return
+}
+
+func callbackSocials(update *tgbotapi.Update) (msg tgbotapi.EditMessageTextConfig) {
+	msg = tgbotapi.NewEditMessageTextAndMarkup(
+		update.FromChat().ID,
+		update.CallbackQuery.Message.MessageID,
+		services.GetTextLocale(update.SentFrom().LanguageCode, "socials"),
+		keyboards.KeyboardSocials(),
+	)
+	return
+}
+
+func callbackSupport(update *tgbotapi.Update) (msg tgbotapi.EditMessageTextConfig) {
+	msg = tgbotapi.NewEditMessageTextAndMarkup(
+		update.FromChat().ID,
+		update.CallbackQuery.Message.MessageID,
+		services.GetTextLocale(update.SentFrom().LanguageCode, "support"),
+		keyboards.KeyboardSupport(),
+	)
+	return
 }
diff --git a/internal/bot/handlers/commands.go b/internal/bot/handlers/commands.go
index 690ddb2..2a38330 100644
--- a/internal/bot/handlers/commands.go
+++ b/internal/bot/handlers/commands.go
@@ -14,14 +14,12 @@ func Commands(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
 	var msg tgbotapi.MessageConfig
 
 	switch update.Message.Command() {
+
 	case "start":
 		msg = cmdStart(bot, update)
-	case "help":
-		cmdHelp(bot, update)
+
 	case "newPost":
-		msg = cmdNewPost(bot, update)
-	case "payment":
-		cmdNewInvoice(bot, update)
+		msg = cmdNewPost(update)
 	}
 
 	if msg.Text != "" {
@@ -38,7 +36,7 @@ func cmdStart(bot *tgbotapi.BotAPI, update tgbotapi.Update) (msg tgbotapi.Messag
 
 		// Add new user to the database if not presented
 		services.AddNewUser(&update)
-		services.SetUserState(&update, "null")
+		services.SetUserState(&update, "start")
 
 		// Getting the message reply from the locale database
 		text := fmt.Sprintf(services.GetTextLocale(update.Message.From.LanguageCode, "start"), update.SentFrom().FirstName+update.SentFrom().LastName)
@@ -52,35 +50,8 @@ func cmdStart(bot *tgbotapi.BotAPI, update tgbotapi.Update) (msg tgbotapi.Messag
 	return
 }
 
-func cmdHelp(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
-	var mediaGroupDocs []any
-	files := []string{
-		"BQACAgIAAxkBAAIXRGgnfn0XPJKzrpreGZ6n1mALkWsiAAIxcwACRBs5SZyy04QDPFfxNgQ",
-		"BQACAgIAAxkBAAIXSWgnf81sMh6qqz0rNBqTXOaOGJT_AAJEcwACRBs5SX-BHZ0gApinNgQ",
-		"BQACAgIAAxkBAAIXSmgnf81N1FpuRK5RSDnX7fxXkXIrAAJGcwACRBs5SbYi3xJeaUfFNgQ",
-		"BQACAgIAAxkBAAIXS2gnf81Apxd6CWFFLRlj7zXzRu8OAAJHcwACRBs5Sa-e7yi7v-cwNgQ",
-		"BQACAgIAAxkBAAIXTGgnf82VC3f0Whn45cbXTcB7TbGGAAJKcwACRBs5SXyOTIeYziiFNgQ",
-		"BQACAgIAAxkBAAIXRGgnfn0XPJKzrpreGZ6n1mALkWsiAAIxcwACRBs5SZyy04QDPFfxNgQ",
-	}
-
-	for _, val := range files {
-		mediaGroupDocs = append(mediaGroupDocs, tgbotapi.NewInputMediaDocument(tgbotapi.FileID(val)))
-	}
+func cmdNewPost(update tgbotapi.Update) (msg tgbotapi.MessageConfig) {
 
-	mediaGroup := tgbotapi.MediaGroupConfig{
-		ChatID: update.Message.Chat.ID,
-		Media:  mediaGroupDocs,
-	}
-
-	_, err := bot.SendMediaGroup(mediaGroup)
-	if err != nil {
-		log.Panicf("Error sending the mediagroup: %v", err)
-	} else {
-		log.Println("MediaGroup was sent successfully.")
-	}
-}
-
-func cmdNewPost(bot *tgbotapi.BotAPI, update tgbotapi.Update) (msg tgbotapi.MessageConfig) {
 	// Check if the user is admin
 	if services.IsAdmin(&update) {
 		services.SetUserState(&update, "newPost_"+update.Message.CommandArguments()) // Change his state
@@ -91,22 +62,6 @@ func cmdNewPost(bot *tgbotapi.BotAPI, update tgbotapi.Update) (msg tgbotapi.Mess
 	return
 }
 
-func cmdNewInvoice(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
-	prices := []tgbotapi.LabeledPrice{
-		{
-			Label:  "Pay for 10 credits",
-			Amount: 1,
-		},
-	}
-
-	invoice := tgbotapi.NewInvoice(update.FromChat().ID, "Test invoice", "description here", "custom_payload", "", "start_param", "XTR", prices)
-	invoice.SuggestedTipAmounts = []int{}
-
-	if _, err := bot.Send(invoice); err != nil {
-		log.Printf("Sending the invoice error: %v", err)
-	}
-}
-
 func handlePrecheckoutQuery(bot *tgbotapi.BotAPI, update *tgbotapi.Update) {
 	pca := tgbotapi.PreCheckoutConfig{
 		OK:                 true,
diff --git a/internal/bot/handlers/init.go b/internal/bot/handlers/init.go
index 1ca535d..57c064b 100644
--- a/internal/bot/handlers/init.go
+++ b/internal/bot/handlers/init.go
@@ -41,8 +41,12 @@ func Init(bot *tgbotapi.BotAPI, botDone *chan struct{}) {
 
 func newUpdateConfig(bot *tgbotapi.BotAPI) (updateConfig tgbotapi.UpdateConfig) {
 	update, _ := bot.GetUpdates(tgbotapi.NewUpdate(0))
-	log.Println("Pending Updates: ", len(update))
-	updateConfig = tgbotapi.NewUpdate(update[len(update)-1].UpdateID + 1)
+	if len(update) != 0 {
+		log.Println("Pending Updates: ", len(update))
+		updateConfig = tgbotapi.NewUpdate(update[len(update)-1].UpdateID + 1)
+	} else {
+		updateConfig = tgbotapi.NewUpdate(0)
+	}
 	updateConfig.Timeout = 30
 	updateConfig.AllowedUpdates = []string{"message", "callback_query", "pre_checkout_query", "shipping_query", "chat_member"}
 	return
diff --git a/internal/bot/handlers/messages.go b/internal/bot/handlers/messages.go
index e42b959..8f09f7b 100644
--- a/internal/bot/handlers/messages.go
+++ b/internal/bot/handlers/messages.go
@@ -14,32 +14,45 @@ func Messages(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
 	var msg tgbotapi.MessageConfig
 
 	state := services.GetUserState(&update)
-	stateSlice := strings.Split(state, "_")
 
 	if update.Message.SuccessfulPayment != nil {
-		log.Println(update.Message.SuccessfulPayment.TelegramPaymentChargeID)
-	}
+		log.Println(update.Message.SuccessfulPayment.TelegramPaymentChargeID, update.Message.SuccessfulPayment.TotalAmount)
+		msg = msgSuccessfulPayment(&update)
+	} else {
+		stateSlice := strings.Split(state, "_")
 
-	switch stateSlice[0] {
-	case "newPost":
-		msg = msgNewPost(&update, &stateSlice)
-	case "download":
-		msg = msgNewDownload(bot, &update)
-		msg.ReplyMarkup = keyboards.KeyboardMainMenu(update.SentFrom().LanguageCode)
-	case "request":
-		if stateSlice[1] != "make" {
-			msg = tgbotapi.NewMessage(update.FromChat().ID, services.GetTextLocale(update.SentFrom().LanguageCode, "request_wrong"))
-		} else {
-			msg = msgNewRequest(&update)
+		switch stateSlice[0] {
+
+		// Admin has sent images for a new post
+		case "newPost":
+			msg = msgNewPost(&update, &stateSlice)
+
+		// User asked to download images from the post
+		case "download":
+			msg = msgNewDownload(bot, &update)
+			msg.ReplyMarkup = keyboards.KeyboardMainMenu(update.SentFrom().LanguageCode)
+
+		// User has made a request
+		case "request":
+			if stateSlice[1] != "make" {
+				msg = tgbotapi.NewMessage(update.FromChat().ID, services.GetTextLocale(update.SentFrom().LanguageCode, "request_wrong"))
+			} else {
+				msg = msgNewRequest(&update)
+			}
+			msg.ReplyMarkup = keyboards.KeyboardMainMenu(update.SentFrom().LanguageCode)
+
+		case "generate":
+			msg = msgGenerate(&update, &stateSlice)
 		}
-		msg.ReplyMarkup = keyboards.KeyboardMainMenu(update.SentFrom().LanguageCode)
 	}
 
-	if msg.Text != "" {
-		msg.ParseMode = "HTML"
-		if _, err := bot.Send(msg); err != nil {
-			log.Printf("Message sending error: %v", err)
-		}
+	if msg.Text == "" {
+		msg = tgbotapi.NewMessage(update.FromChat().ID, "I'm sorry, your request is wrong")
+		msg.ReplyMarkup = keyboards.KeyboardMainMenu(update.SentFrom().LanguageCode)
+	}
+	msg.ParseMode = "HTML"
+	if _, err := bot.Send(msg); err != nil {
+		log.Printf("Message sending error: %v", err)
 	}
 }
 
@@ -73,3 +86,27 @@ func msgNewRequest(update *tgbotapi.Update) (msg tgbotapi.MessageConfig) {
 	msg = tgbotapi.NewMessage(update.FromChat().ID, text)
 	return
 }
+
+func msgSuccessfulPayment(update *tgbotapi.Update) (msg tgbotapi.MessageConfig) {
+	services.SetUserState(update, "successfulPayment")
+	services.ChangeBalance(update.Message.SuccessfulPayment.TotalAmount, update)
+	msg = tgbotapi.NewMessage(update.FromChat().ID, "Your payment was successful, thank you!")
+	msg.ReplyMarkup = keyboards.KeyboardMainMenu(update.SentFrom().LanguageCode)
+	return
+}
+
+func msgGenerate(update *tgbotapi.Update, stateSlice *[]string) (msg tgbotapi.MessageConfig) {
+	switch (*stateSlice)[1] {
+	case "menu":
+	case "1":
+		msg = tgbotapi.NewMessage(update.FromChat().ID, "Your image will be ready soon.")
+		msg.ReplyMarkup = keyboards.KeyboardBackButton("generate_menu")
+	case "2":
+		msg = tgbotapi.NewMessage(update.FromChat().ID, "Your image will be ready soon.")
+		msg.ReplyMarkup = keyboards.KeyboardBackButton("generate_menu")
+	case "3":
+		msg = tgbotapi.NewMessage(update.FromChat().ID, "Your image will be ready soon.")
+		msg.ReplyMarkup = keyboards.KeyboardBackButton("generate_menu")
+	}
+	return
+}
diff --git a/internal/bot/keyboards/keyboards.go b/internal/bot/keyboards/keyboards.go
index 8a270dd..c360822 100644
--- a/internal/bot/keyboards/keyboards.go
+++ b/internal/bot/keyboards/keyboards.go
@@ -7,6 +7,9 @@ import (
 
 func KeyboardStart(locale string) tgbotapi.InlineKeyboardMarkup {
 	var keyboard = tgbotapi.NewInlineKeyboardMarkup(
+		tgbotapi.NewInlineKeyboardRow(
+			tgbotapi.NewInlineKeyboardButtonData(services.GetTextLocale(locale, "generateButton"), "generate_menu"),
+		),
 		tgbotapi.NewInlineKeyboardRow(
 			tgbotapi.NewInlineKeyboardButtonData(services.GetTextLocale(locale, "requestButton"), "request_0"),
 			tgbotapi.NewInlineKeyboardButtonData(services.GetTextLocale(locale, "downloadButton"), "download_0"),
@@ -99,8 +102,8 @@ func KeyboardPaidPictureRequest() tgbotapi.InlineKeyboardMarkup {
 	return keyboard
 }
 
-func KeyboardFreeRequestStart() tgbotapi.InlineKeyboardMarkup {
-	keyboard := tgbotapi.NewInlineKeyboardMarkup(
+func KeyboardFreeRequestStart() (keyboard tgbotapi.InlineKeyboardMarkup) {
+	keyboard = tgbotapi.NewInlineKeyboardMarkup(
 		tgbotapi.NewInlineKeyboardRow(
 			tgbotapi.NewInlineKeyboardButtonData("➡️", "request_make"),
 		),
@@ -108,5 +111,53 @@ func KeyboardFreeRequestStart() tgbotapi.InlineKeyboardMarkup {
 			tgbotapi.NewInlineKeyboardButtonData("↩️", "request_0"),
 		),
 	)
-	return keyboard
+	return
+}
+
+func KeyboardGenerateMenu() (keyboard tgbotapi.InlineKeyboardMarkup) {
+	keyboard = tgbotapi.NewInlineKeyboardMarkup(
+		tgbotapi.NewInlineKeyboardRow(
+			tgbotapi.NewInlineKeyboardButtonData("1️⃣ Creative Dream Style (4 🪙)", "generate_1"),
+		),
+		tgbotapi.NewInlineKeyboardRow(
+			tgbotapi.NewInlineKeyboardButtonData("2️⃣ Realism Style (2 🪙)", "generate_2"),
+		),
+		tgbotapi.NewInlineKeyboardRow(
+			tgbotapi.NewInlineKeyboardButtonData("3️⃣ Anime Style (2 🪙)", "generate_3"),
+		),
+		tgbotapi.NewInlineKeyboardRow(
+			tgbotapi.NewInlineKeyboardButtonData("🪙 Add credits 🪙", "payment_menu"),
+		),
+		tgbotapi.NewInlineKeyboardRow(
+			tgbotapi.NewInlineKeyboardButtonData("🏠 Main Menu 🏠", "start"),
+		),
+	)
+	return
+}
+
+func KeyboardPayment() (keyboard tgbotapi.InlineKeyboardMarkup) {
+	keyboard = tgbotapi.NewInlineKeyboardMarkup(
+		tgbotapi.NewInlineKeyboardRow(
+			tgbotapi.NewInlineKeyboardButtonData("⭐️1000 (🪙 80)", "payment_1000"),
+		),
+		tgbotapi.NewInlineKeyboardRow(
+			tgbotapi.NewInlineKeyboardButtonData("⭐️500 (🪙 40)", "payment_500"),
+		),
+		tgbotapi.NewInlineKeyboardRow(
+			tgbotapi.NewInlineKeyboardButtonData("⭐️250 (🪙 20)", "payment_250"),
+		),
+		tgbotapi.NewInlineKeyboardRow(
+			tgbotapi.NewInlineKeyboardButtonData("↩️", "generate_menu"),
+		),
+	)
+	return
+}
+
+func KeyboardBackButton(baskState string) (keyboard tgbotapi.InlineKeyboardMarkup) {
+	keyboard = tgbotapi.NewInlineKeyboardMarkup(
+		tgbotapi.NewInlineKeyboardRow(
+			tgbotapi.NewInlineKeyboardButtonData("↩️", baskState),
+		),
+	)
+	return
 }
diff --git a/internal/database/postgres/postgres.go b/internal/database/postgres/postgres.go
index 037e02c..2aa7a30 100644
--- a/internal/database/postgres/postgres.go
+++ b/internal/database/postgres/postgres.go
@@ -82,7 +82,6 @@ func GenerateLocales(db *gorm.DB) {
 				}
 				db.Create(&locale)
 			}
-
 		}
 	}
 }
diff --git a/internal/models/models.go b/internal/models/models.go
index 8c0827f..9aef494 100644
--- a/internal/models/models.go
+++ b/internal/models/models.go
@@ -5,10 +5,12 @@ import "time"
 // 1. Table user in database
 type User struct {
 	ID                   uint `gorm:"primaryKey"`
+	ChatId               int64
 	TgId                 int64
 	FullName             string
 	MsgCount             uint
 	FreeRequestCount     uint
+	Credits              int
 	GeneratedImagesCount uint
 	RegistrationDate     time.Time
 	State                string
diff --git a/internal/repositories/locales/en.json b/internal/repositories/locales/en.json
index b1c9785..cd11b11 100644
--- a/internal/repositories/locales/en.json
+++ b/internal/repositories/locales/en.json
@@ -2,9 +2,7 @@
   "start": "<b>Hello %s</b>\nThis is the bot <b>Creative Dream Bot</b>.\n\nHere you can:\n<b>1.</b> Make a request for your own character.\n<b>2.</b> Download my pictures without watermark in the best quality.",
   "not_subscribed": "To use this bot, you should be subscribed to my channel!",
 
-  "download_0": "<b>Download</b>\n\nTo Download my pictures in the best quality and without watermark, send me a number of publication.\n\nHow to knew a number you need:\n<b>1.</b> Open publication in my group - @gokuryo_art\n<b>2.</b> Copy the number from the description.",
-  "download_1": "Send me another post number, or press the number below",
-
+  "generateButton": "🎨 Generate Image 🎨",
   "requestButton": "✍️ Request ✍️",
   "downloadButton": "🖼️ Download 🖼️",
   "socialsButton": "🔗 Socials 🔗",
@@ -14,10 +12,19 @@
   "socials": "<b>🔗 Socials 🔗</b>",
   "support": "<b>💵 Support Channel 💵</b>",
 
+  "generate_menu": "<b>Generate Image: <i>Menu</i></b>\n\n<i>%s</i>\nGenerated images: %d 🎨\nBalance: %d 🪙 (⭐️ %d)\n",
+
+  "payment_menu": "Choose the top-up option:",
+  "balance_up_title": "🪙 %d coins",
+  "balance_up_description": "Top up balance for 🪙 %d coins.",
+
   "request_0": "<b>1️⃣ - (PAID)</b> Skip the queue and get your image as soon as possible.\n<b>2️⃣ - (FREE)</b> Your request will be added to the queue and will be processed.\n\nChoose a type of your request:",
   "request_1": "Your request will be added to the queue and will be processed as soon as possible.\nThe waiting time may vary depending on the complexity of the request.\n\nPaid request price list:\n\nRegular pics (like on @gokuryo_art channel):\n• 5$ for 1 picture.\n• 15$ for a 4-picture pack.\n<b>! ! ! Regular pictures</b> will be posted on the @gokuryo_art channel\n\nNSFW / Hentai pics (you can access the nsfw chat room after the purchase)\n• 7$ for 1 picture\n• 20$ for a 4 picture pack.\n<b>! ! ! NSFW pictures</b> can be posted to the NSFW chat or not as you wish.\n\nPlease use <b>PayPal</b> to pay for your request, and then proceed with the arrow.\n\nPlease write this in the payment description: %s",
   "request_2": "<b>Your request</b> will be added to the queue and will be processed.\nThe waiting time may vary depending on the current load and the complexity of the request.",
   "request_make": "Let's create a <b>Request.</b>\n\nWrite here what would you like to see\n\nExample: <i>Gojo Satoru in the wedding</i>",
   "request_made": "Your request:\n\n<blockquote>%s</blockquote>\n\nHas been successfully created!",
-  "request_wrong": "You can't send me request now. Please follow insructions."
+  "request_wrong": "You can't send me request now. Please follow insructions.",
+
+  "download_0": "<b>Download</b>\n\nTo Download my pictures in the best quality and without watermark, send me a number of publication.\n\nHow to knew a number you need:\n<b>1.</b> Open publication in my group - @gokuryo_art\n<b>2.</b> Copy the number from the description.",
+  "download_1": "Send me another post number, or press the number below"
 }
diff --git a/internal/repositories/locales/ru.json b/internal/repositories/locales/ru.json
index 2320f7c..919e61f 100644
--- a/internal/repositories/locales/ru.json
+++ b/internal/repositories/locales/ru.json
@@ -2,9 +2,7 @@
   "start": "<b>Привет %s</b>\nЭто бот <b>Creative Dream Bot</b>.\n\nВ данном боте ты можешь:\n<b>1.</b> Сделать запрос на создание своего персонажа.\n<b>2.</b> Скачать мои картинки без водяного знака, в высоком качестве.",
   "not_subscribed": "Чтобы использовать этот бот, ты должен быть подписан на мой канал!",
 
-  "download_0": "<b>Скачать картинки</b>\n\nЧтобы скачать картинки в высоком качестве, без водяного знака - отправь мне номер поста.\n\nЧтобы узнать номер поста:\n<b>1.</b> Открой нужный пост в канале - @gokuryo_art\n<b>2.</b> Отправь его номер из описания мне.",
-  "download_1": "Отправь мне другой номер поста или нажми на кнопку ниже",
-
+  "generateButton": "🎨 Генерация Картинки 🎨",
   "requestButton": "✍️ Сделать запрос ✍️",
   "downloadButton": "🖼️ Скачать картинки 🖼️",
   "socialsButton": "🔗 Мои соц. сети 🔗",
@@ -14,10 +12,19 @@
   "socials": "<b>🔗 Мои соц. сети 🔗</b>",
   "support": "<b>💵 Поддержать канал💵</b>",
 
+  "generate_menu": "<b>Генерация картинки: Меню</b>\n\n<i>%s</i>\nСозданные картинки: %d 🎨\nБаланс: %d 🪙 (⭐️%d)\n",
+
+  "payment_menu": "Выбери вариант пополнения:",
+  "balance_up_title": "🪙 %d монет",
+  "balance_up_description": "Пополнение баланса на 🪙 %d монет.",
+
   "request_0": "<b>1️⃣ - (ПЛАТНЫЙ)</b> Обработка запроса вне очереди.\n<b>2️⃣ - (БЕСПЛАТНЫЙ)</b> Твой запрос будет добавлен в очередь.\n\nВыбери тип запроса:",
   "request_1": "Твой запрос будет обработан вне очереди.\nВремя ожидания выполненного запроса может зависеть от загруженности и сложности запроса.\n\nПлатный запрос расценки:\n\nОбычные картинки (как на канале @gokuryo_art):\n• 5$ за 1 картинку\n• 15$ за комплект из 4-х картинок\n<b>! ! !</b> Обычные картинки будут опубликованы на канале @gokuryo_art\n\nNSFW / Hentai (после покупки ты можешь войти в nsfw-чат)\n• 7$ за 1 картинку\n• 20$ за комплект из 4-х картинок.\n<b>! ! !</b> NSFW картинки могут быть опубликованы в NSFW чате (по твоему желанию)\n\nПожалуйста, используй PayPal, для оплаты запроса и затем нажми на срелочку.\n\nНе забудь добавить это в описании к платежу: %s",
   "request_2": "<b>Твой запрос</b> будет добавлен в очередь.\nВремя ожидания выполненного запроса может зависеть от загруженности и сложности запроса.",
   "request_make": "<b>Создание запроса</b>\n\n Отправь мне, что бы тебе хотелось видеть\n\nНапример: <i>02 в вечернем платье</i>",
   "request_made": "Твой запрос:\n\n<blockquote>%s</blockquote>\n\nБыл успешно создан!",
-  "request_wrong": "Ты не можешь отправить мне запрос сейчас. Пожалуйста, следуй инструкциям."
+  "request_wrong": "Ты не можешь отправить мне запрос сейчас. Пожалуйста, следуй инструкциям.",
+
+  "download_0": "<b>Скачать картинки</b>\n\nЧтобы скачать картинки в высоком качестве, без водяного знака - отправь мне номер поста.\n\nЧтобы узнать номер поста:\n<b>1.</b> Открой нужный пост в канале - @gokuryo_art\n<b>2.</b> Отправь его номер из описания мне.",
+  "download_1": "Отправь мне другой номер поста или нажми на кнопку ниже"
 }
diff --git a/internal/services/users.go b/internal/services/users.go
index dae11e4..1802b1d 100644
--- a/internal/services/users.go
+++ b/internal/services/users.go
@@ -14,13 +14,15 @@ import (
 
 func AddNewUser(update *tgbotapi.Update) {
 	var newUser = models.User{
-		TgId:                 update.Message.From.ID,
-		FullName:             update.Message.From.FirstName + update.Message.From.LastName,
+		ChatId:               update.FromChat().ID,
+		TgId:                 update.SentFrom().ID,
+		FullName:             update.SentFrom().FirstName + update.SentFrom().LastName,
 		MsgCount:             0,
 		FreeRequestCount:     0,
+		Credits:              0,
 		GeneratedImagesCount: 0,
 		RegistrationDate:     time.Now(),
-		State:                "null",
+		State:                "start",
 		Authorized:           false,
 	}
 
@@ -89,3 +91,22 @@ func GetUser(update *tgbotapi.Update) (user models.User) {
 	}
 	return
 }
+
+func ChangeBalance(amount int, update *tgbotapi.Update) {
+	user, err := repositories.GetUserByTgId(update.SentFrom().ID)
+	if err != nil {
+		log.Printf("User not found: %v", err)
+	}
+	user.Credits += amount
+	if err := repositories.UpdateUser(&user); err != nil {
+		log.Printf("Update user: %v", err)
+	}
+}
+
+func EnoughCoins(amount int, update *tgbotapi.Update) bool {
+	user, err := repositories.GetUserByTgId(update.SentFrom().ID)
+	if err != nil {
+		log.Printf("User not found: %v", err)
+	}
+	return user.Credits >= amount
+}
